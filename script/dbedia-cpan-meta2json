#!/usr/bin/perl

=head1 NAME

dbedia-cpan-meta2json - convert information in .meta files

=head1 SYNOPSIS

	dbedia-cpan-meta2json [--mirror-location $PATH1] [--dbedia-location $PATH2]

=head1 DESCRIPTION

=cut


use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use File::Find::Rule;
use File::Slurp 'write_file', 'read_file';
use JSON::XS;
use File::Basename 'dirname';
use File::Path 'mkpath';
use YAML::XS 'Load';
use File::is;

use FindBin '$Bin';

exit main();

sub main {
	my $help;
	my $mirror_location  = File::Spec->catdir($Bin, '..', 'tmp', 'CPAN-mirror');
	my $dbedia_location  = File::Spec->catdir($Bin, '..', 'tmp', 'dbedia');
	GetOptions(
		'help|h'            => \$help,
		'mirror-location=s' => \$mirror_location,
		'dbedia-location=s' => \$dbedia_location,
	) or pod2usage;
	pod2usage if $help;

	my $json = JSON::XS->new->utf8->pretty(1)->allow_blessed(1);
	my $metalist_location = File::Spec->catfile($dbedia_location, 'metaList.json');
	
	# get list of meta files
	my @meta_files = File::Find::Rule
		->file()
		->name( '*.meta' )
		->in( $mirror_location )
	;
	
	# loop through meta files
	my @meta_list;
	my %hash_list;
	foreach my $meta_filename (@meta_files) {
		my $json_filename = $meta_filename;
		$json_filename =~ s{^$mirror_location.(.+)meta$}{$1json};		
		push @meta_list, $json_filename;
		
		# skip if already generated and not newer
		$json_filename = File::Spec->catdir($dbedia_location, $json_filename);
		next if ((-e $json_filename) and File::is->newer($json_filename, $meta_filename));
		
		# parse meta file
		my $meta_content = eval { Load(scalar read_file($meta_filename)) };
		if (ref $meta_content ne 'HASH') {
			warn 'meta "'.$meta_filename.'" has unsupported format ('.$@.')';
			pop @meta_list;
			next;
		}
		
		# write json file	
		my $json_dirname = $json_filename;
		mkpath(dirname($json_filename))
			if not -e $json_dirname;
		write_file($json_filename, $json->encode($meta_content));
	}
	
	# write list of meta files
	write_file($metalist_location, $json->encode(\@meta_list));
	
	# write lists of hashes
	foreach my $hash_alg (keys %hash_list) {
		my $hash_filename = File::Spec->catfile($dbedia_location, 'fileHashes'.$hash_alg.'.json');
		write_file($hash_filename, $json->encode($hash_list{$hash_alg}));
	}
	
	return 0;
}
